[
    {
        "instruction": "<fim_prefix>\ndef multiply_column(df, col, factor):\n    \"\"\"\n    Multiply the values in a specific column of a DataFrame by a given factor.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - col (str): Name of the column to multiply\n    - factor (float): Factor to multiply the column values by\n\n    Returns:\n    - DataFrame: DataFrame with the specified column multiplied by the factor.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n        col1  col2  col3\n    0     1    2    3\n\n    Function call:\n    --------------\n    multiply_column(df, 'col2', 2)\n\n    Output DataFrame:\n    -----------------\n        col1  col2   col3\n    0     1     4     3\n    \"\"\"\n<fim_suffix>\n    return new_df\n\n<fim_middle>",
        "input": "",
        "output": "    new_df = df.copy()\n    new_df[col] = new_df[col] * factor\n"
    },
    {
        "instruction": "<fim_prefix>\ndef multiply_columns(df, col1, col2, new_col_name):\n    \"\"\"\n    Create a new DataFrame with an additional column that contains the multiplication of col1 and col2.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - col1 (str): Name of the first column to consider\n    - col2 (str): Name of the second column to consider\n    - new_col_name (str): Name of the new column in the resulting DataFrame\n\n    Returns:\n    - DataFrame: New DataFrame with the additional column.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n        col1  col2  col3\n    0     2    3    4\n\n    Function call:\n    --------------\n    multiply_columns(df, 'col1', 'col2', 'product')\n\n    Output DataFrame:\n    -----------------\n        col1  col2  col3  product\n    0     2    3    4        6\n    \"\"\"\n<fim_suffix>\n    return new_df\n\n<fim_middle>",
        "input": "",
        "output": "    new_df = df.copy()\n    new_df[new_col_name] = new_df[col1] * new_df[col2]\n"
    },
    {
        "instruction": "<fim_prefix>\ndef multiply_column(df, col, num):\n    \"\"\"\n    Multiply a column in the DataFrame by a given number and update the column in place.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - col (str): Name of the column to multiply\n    - num (int or float): Number to multiply the column by\n\n    Returns:\n    - None\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n        Name  Age  Salary\n    0   John   25   30000\n    1   Mary   30   40000\n    2   Mark   35   50000\n\n    Function call:\n    --------------\n    multiply_column(df, 'Salary', 1.1)\n\n    Output DataFrame:\n    -----------------\n        Name  Age  Salary\n    0   John   25   33000.0\n    1   Mary   30   44000.0\n    2   Mark   35   55000.0\n    \"\"\"\n<fim_suffix>\n\n<fim_middle>",
        "input": "",
        "output": "    df[col] = df[col] * num\n"
    },
    {
        "instruction": "<fim_prefix>\nimport pandas as pd\n\ndef get_total_sales(df):\n    \"\"\"\n    Calculate the total sales for each product category in the DataFrame and add a new column 'total_sales' that contains these values.\n\n    Parameters:\n    - df (DataFrame): The original DataFrame with columns 'category' and 'sales'.\n\n    Returns:\n    - DataFrame: The original DataFrame with an additional 'total_sales' column.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n       category  sales\n    0  Electronics   100\n    1  Furniture     200\n    2  Electronics   300\n    3  Clothing      400\n\n    Function call:\n    --------------\n    get_total_sales(df)\n\n    Output DataFrame:\n    -----------------\n       category  sales  total_sales\n    0  Electronics   100   400\n    1  Furniture     200   200\n    2  Electronics   300   400\n    3  Clothing      400   400\n    \"\"\"\n<fim_suffix>\n    return df\n\n<fim_middle>",
        "input": "",
        "output": "    df['total_sales'] = df.groupby('category')['sales'].transform('sum')\n"
    },
    {
        "instruction": "<fim_prefix>\nimport pandas as pd\n\ndef filter_dataframe(df, col, value):\n    \"\"\"\n    Create a new DataFrame that includes only the rows where the value in the 'col' column is equal to the given 'value'.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - col (str): Name of the column to filter on\n    - value (any): Value to filter for\n\n    Returns:\n    - DataFrame: New DataFrame containing only the rows where the value in the 'col' column is equal to the given 'value'\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n       Name  Age  Score\n    0  Alice   25    80\n    1    Bob   30    75\n    2  Alice   35    90\n\n    Function call:\n    --------------\n    filter_dataframe(df, 'Name', 'Alice')\n\n    Output DataFrame:\n    -----------------\n       Name  Age  Score\n    0  Alice   25    80\n    2  Alice   35    90\n    \"\"\"\n<fim_suffix>\n\n    return new_df\n\n<fim_middle>",
        "input": "",
        "output": "    new_df = df[df[col] == value]\n"
    },
    {
        "instruction": "<fim_prefix>\ndef filter_students(df, passing_score):\n    \"\"\"\n    Filter out students from a DataFrame based on their scores.\n\n    Parameters:\n    - df (DataFrame): DataFrame containing student information including 'name' and 'score'\n    - passing_score (float): Minimum required score for students to pass\n\n    Returns:\n    - DataFrame: New DataFrame with only the students who scored above the passing score\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n         name  score\n    0    Alice   85\n    1      Bob   92\n    2  Charlie   78\n    3     Dave   65\n\n    Function call:\n    --------------\n    filter_students(df, 80)\n\n    Output DataFrame:\n    -----------------\n       name  score\n    0  Alice     85\n    1    Bob     92\n    ```\n<fim_suffix>\n    return new_df\n\n<fim_middle>",
        "input": "",
        "output": "    new_df = df[df['score'] > passing_score]\n"
    },
    {
        "instruction": "<fim_prefix>\nimport pandas as pd\n\ndef filter_data(df, col_name, value):\n    \"\"\"\n    Filter the DataFrame based on a condition where the values in col_name are greater than value.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - col_name (str): Name of the column to consider for filtering\n    - value (int or float): Value to compare against in the condition\n\n    Returns:\n    - DataFrame: Filtered DataFrame where the values in col_name are greater than value.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n        A    B    C\n    0    2    5    7\n    1    4    6    8\n    2    1    3    5\n\n    Function call:\n    --------------\n    filter_data(df, 'B', 5)\n\n    Output DataFrame:\n    -----------------\n        A   B   C\n    1    4   6   8\n    \"\"\"\n<fim_suffix>\n    return filtered_df\n\n<fim_middle>",
        "input": "",
        "output": "    filtered_df = df[df[col_name] > value]\n"
    },
    {
        "instruction": "<fim_prefix>\ndef filter_data(df, col, value):\n    \"\"\"\n    Filter the DataFrame to include only rows where the value in col is greater than or equal to the given value.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - col (str): Name of the column to consider\n    - value: Value to compare\n\n    Returns:\n    - DataFrame: Filtered DataFrame\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n        col1  col2  col3\n    0     1    2    3\n    1     4    5    6\n    2     7    8    9\n\n    Function call:\n    --------------\n    filter_data(df, 'col2', 5)\n\n    Output DataFrame:\n    -----------------\n        col1  col2  col3\n    1     4    5    6\n    2     7    8    9\n    \"\"\"\n<fim_suffix>\n    return filtered_df\n\n<fim_middle>",
        "input": "",
        "output": "    filtered_df = df[df[col] >= value]\n"
    },
    {
        "instruction": "<fim_prefix>\ndef filter_students(df, passing_grade):\n    \"\"\"\n    Filter a DataFrame to only include students who have a grade higher than or equal to the passing grade.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame with student information\n    - passing_grade (int): The minimum grade required for a student to pass\n\n    Returns:\n    - DataFrame: Filtered DataFrame containing only the students who passed.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n         Name   Grade\n    0    John      80\n    1    Lisa      90\n    2    Mark      75\n\n    Function call:\n    --------------\n    filter_students(df, 80)\n\n    Output DataFrame:\n    -----------------\n        Name   Grade\n    0    John      80\n    1    Lisa      90\n    \"\"\"\n<fim_suffix>\n    return filtered_df\n\n<fim_middle>",
        "input": "",
        "output": "    filtered_df = df[df['Grade'] >= passing_grade].copy()\n"
    },
    {
        "instruction": "<fim_prefix>\ndef calculate_total_sales(df):\n    \"\"\"\n    Calculate the total sales for each row in a DataFrame and store the result in a new column 'total_sales'.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n\n    Returns:\n    - DataFrame: New DataFrame with an additional 'total_sales' column.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n        product   price   quantity\n    0   apple     1.0     5\n    1   banana    0.5     10\n\n    Function call:\n    --------------\n    calculate_total_sales(df)\n\n    Output DataFrame:\n    -----------------\n        product   price   quantity   total_sales\n    0   apple     1.0     5          5.0\n    1   banana    0.5     10         5.0\n    \"\"\"\n<fim_suffix>\n    return new_df\n\n<fim_middle>",
        "input": "",
        "output": "    new_df = df.copy()\n    new_df['total_sales'] = new_df.apply(lambda row: row['price'] * row['quantity'], axis=1)\n"
    },
    {
        "instruction": "<fim_prefix>\ndef add_condition(df, col1, col2, threshold):\n    \"\"\"\n    Create a new DataFrame with an additional column 'new_col', which contains the following values:\n    - If the value in col1 is greater than threshold and the value in col2 is less than threshold, \n      the value in new_col should be 'A'\n    - If the value in col1 is less than threshold and the value in col2 is greater than threshold, \n      the value in new_col should be 'B'\n    - If neither of the above conditions are met, the value in new_col should be 'C'\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - col1 (str): Name of the first column to consider\n    - col2 (str): Name of the second column to consider\n    - threshold (float): Value to compare against col1 and col2\n\n    Returns:\n    - DataFrame: New DataFrame with an additional 'new_col' column.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n        col1  col2\n    0     5     7\n    1     2     4\n    2     8     1\n    \n    Function call:\n    --------------\n    add_condition(df, 'col1', 'col2', 4)\n\n    Output DataFrame:\n    -----------------\n        col1  col2  new_col\n    0     5     7       A\n    1     2     4       C\n    2     8     1       B\n    \"\"\"\n<fim_suffix>\n    return new_df\n\n<fim_middle>",
        "input": "",
        "output": "    new_df = df.copy()\n    new_df['new_col'] = new_df.apply(lambda row: 'A' if row[col1] > threshold and row[col2] < threshold \n                                      else 'B' if row[col1] < threshold and row[col2] > threshold\n                                      else 'C', axis=1)\n"
    },
    {
        "instruction": "<fim_prefix>\ndef filter_dataframe(df, col1, col2):\n    \"\"\"\n    Create a new DataFrame that contains only the rows where the values in col1 are equal to the values in col2\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - col1 (str): Name of the first column to consider\n    - col2 (str): Name of the second column to consider\n\n    Returns:\n    - DataFrame: New DataFrame with the filtered rows.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n       col1   col2 \n    0   'a'    'b' \n    1   'c'    'c' \n    2   'd'    'e' \n\n    Function call:\n    --------------\n    filter_dataframe(df, 'col1', 'col2')\n\n    Output DataFrame:\n    -----------------\n       col1   col2 \n    1   'c'    'c' \n    \"\"\"\n<fim_suffix>\n    return filtered_df\n\n<fim_middle>",
        "input": "",
        "output": "    filtered_df = df[df[col1] == df[col2]]\n"
    },
    {
        "instruction": "<fim_prefix>\ndef filter_rows(df, col1, col2):\n    \"\"\"\n    Create a new DataFrame that only contains rows where the value in col1 is greater than the value in col2.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - col1 (str): Name of the first column to consider\n    - col2 (str): Name of the second column to consider\n\n    Returns:\n    - DataFrame: New DataFrame with only rows that satisfy the condition col1 > col2.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n        col1  col2\n    0     3     1\n    1     2     4\n    2     5     5\n\n    Function call:\n    --------------\n    filter_rows(df, 'col1', 'col2')\n\n    Output DataFrame:\n    -----------------\n        col1  col2\n    0     3     1\n    ```\n<fim_suffix>\n    return new_df\n\n<fim_middle>",
        "input": "",
        "output": "    new_df = df[df[col1] > df[col2]]\n"
    },
    {
        "instruction": "<fim_prefix>\ndef square_root(df, col):\n    \"\"\"\n    Create a new DataFrame with an additional column 'sqrt', which contains the square root of values in col.\n    If the values in col are negative, replace them with NaN (Not a Number).\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - col (str): Name of the column to consider\n\n    Returns:\n    - DataFrame: New DataFrame with an additional 'sqrt' column.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n        col\n    0      9\n    1      -4\n    2      16\n\n    Function call:\n    --------------\n    square_root(df, 'col')\n\n    Output DataFrame:\n    -----------------\n        col   sqrt\n    0      9    3\n    1     -4    NaN\n    2     16    4\n    \"\"\"\n<fim_suffix>\n    return new_df\n\n<fim_middle>",
        "input": "",
        "output": "    new_df = df.copy()\n    new_df['sqrt'] = new_df['col'].apply(lambda x: x**0.5 if x >= 0 else float('nan'))\n"
    },
    {
        "instruction": "<fim_prefix>\ndef apply_function(df, col1, col2):\n    \"\"\"\n    Create a new DataFrame with an additional column 'result', which contains the result of applying a lambda function to \n    each row of the DataFrame based on the values of col1 and col2 columns.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - col1 (str): Name of the first column to consider\n    - col2 (str): Name of the second column to consider\n\n    Returns:\n    - DataFrame: New DataFrame with an additional 'result' column.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n        col1  col2  col3\n    0     1    2    3\n    1     4    5    6\n    2     7    8    9\n\n    Function call:\n    --------------\n    apply_function(df, 'col1', 'col2')\n\n    Output DataFrame:\n    -----------------\n        col1  col2  col3  result\n    0     1    2    3        3\n    1     4    5    6        20\n    2     7    8    9        70\n    \"\"\"\n<fim_suffix>\n    return new_df\n\n<fim_middle>",
        "input": "",
        "output": "    new_df = df.copy()\n    new_df['result'] = new_df.apply(lambda row: row[col1] * row[col2], axis=1)\n"
    },
    {
        "instruction": "<fim_prefix>\ndef filter_data(df, condition1, condition2):\n    \"\"\"\n    Create a new DataFrame that filters the original DataFrame based on two conditions.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - condition1 (str): The first condition used to filter the DataFrame\n    - condition2 (str): The second condition used to filter the DataFrame\n\n    Returns:\n    - DataFrame: New DataFrame filtered based on the two conditions.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n        name  age  score\n    0   John   20    90\n    1   Mary   25    85\n    2   Alex   30    95\n    3   Jane   35    80\n\n    Function call:\n    --------------\n    filter_data(df, 'age > 25', 'score >= 90')\n\n    Output DataFrame:\n    -----------------\n        name  age  score\n    2   Alex   30    95\n    \"\"\"\n<fim_suffix>\n    return filtered_df\n\n<fim_middle>",
        "input": "",
        "output": "    filtered_df = df.loc[df.eval(condition1) & df.eval(condition2)]\n"
    },
    {
        "instruction": "<fim_prefix>\ndef filter_and_sort(df, col1, val, col2):\n    \"\"\"\n    Filter the DataFrame to only include rows where col1 is greater than val and then sort the DataFrame by col2 in descending order.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - col1 (str): Name of the column to filter\n    - val (numeric): Value to filter on\n    - col2 (str): Name of the column to sort\n\n    Returns:\n    - DataFrame: Filtered and sorted DataFrame.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n        col1  col2  col3\n    0     5     2     3\n    1     3     1     2\n    2     8     4     5\n\n    Function call:\n    --------------\n    filter_and_sort(df, 'col1', 4, 'col2')\n\n    Output DataFrame:\n    -----------------\n        col1  col2  col3\n    2     8     4     5\n    0     5     2     3\n    \"\"\"\n<fim_suffix>\n    return filtered_sorted_df\n\n<fim_middle>",
        "input": "",
        "output": "    filtered_df = df[df[col1] > val]\n    filtered_sorted_df = filtered_df.sort_values(by=col2, ascending=False)\n"
    },
    {
        "instruction": "<fim_prefix>\ndef filter_dataframe(df, col, value):\n    \"\"\"\n    Create a new DataFrame that only contains rows where the value in the specified column is equal to the given value.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - col (str): Name of the column to filter on\n    - value : Value to filter on\n\n    Returns:\n    - DataFrame: New DataFrame that only contains rows with the specified value in the specified column.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n        Name   Age\n    0   Alice   25\n    1   Bob     30\n    2   Charlie 28\n\n    Function call:\n    --------------\n    filter_dataframe(df, 'Age', 30)\n\n    Output DataFrame:\n    -----------------\n        Name   Age\n    1   Bob     30\n    \"\"\"\n<fim_suffix>\n    return filtered_df\n\n<fim_middle>",
        "input": "",
        "output": "    filtered_df = df[df[col] == value]\n"
    },
    {
        "instruction": "<fim_prefix>\ndef filter_and_sort(df, filter_col, filter_val, sort_col):\n    \"\"\"\n    Given a DataFrame, filter rows based on a specific column value, and then sort the DataFrame based on another column.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - filter_col (str): Name of the column to filter\n    - filter_val: Value to filter the column by\n    - sort_col (str): Name of the column to sort by\n\n    Returns:\n    - DataFrame: Filtered and sorted DataFrame\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n       Name  Age  Score\n    0   Amy   21    100\n    1   Bob   25     80\n    2  Chad   23     95\n\n    Function call:\n    --------------\n    filter_and_sort(df, 'Name', 'Amy', 'Age')\n\n    Output DataFrame:\n    -----------------\n       Name  Age  Score\n    0   Amy   21    100\n    \"\"\"\n<fim_suffix>\n    return filtered_sorted_df\n\n<fim_middle>",
        "input": "",
        "output": "    filtered_df = df[df[filter_col] == filter_val]\n    filtered_sorted_df = filtered_df.sort_values(by=sort_col)\n"
    },
    {
        "instruction": "<fim_prefix>\ndef filter_data(df, col_name, condition):\n    \"\"\"\n    Filter a DataFrame based on a condition specified for a specific column.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - col_name (str): Name of the column to consider\n    - condition (str): Condition for filtering the column (e.g., \">10\", \"== 'A'\", \"<=5\")\n\n    Returns:\n    - DataFrame: Filtered DataFrame\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n       Name  Age Sex\n    0  John   25   M\n    1  Mary   30   F\n    2   Tom   40   M\n    3  Kate   35   F\n\n    Function call:\n    --------------\n    filter_data(df, 'Age', \">30\")\n\n    Output DataFrame:\n    -----------------\n       Name  Age Sex\n    2   Tom   40   M\n    3  Kate   35   F\n    \"\"\"\n<fim_suffix>\n    return filtered_df\n\n<fim_middle>",
        "input": "",
        "output": "    filtered_df = df.copy()\n    filtered_df = filtered_df.loc[eval(f\"filtered_df['{col_name}'] {condition}\")]\n"
    },
    {
        "instruction": "<fim_prefix>\ndef filter_data(df):\n    \"\"\"\n    Filter the DataFrame to include only rows where the value in the 'score' column is greater than 80 \n    and the value in the 'age' column is less than 30.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    \n    Returns:\n    - DataFrame: Filtered DataFrame with the specified conditions.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n        name   age   score\n    0   John   25    90\n    1   Lisa   31    85\n    2   Mark   28    95\n\n    Function call:\n    --------------\n    filter_data(df)\n\n    Output DataFrame:\n    -----------------\n        name   age   score\n    0   John   25    90\n    2   Mark   28    95\n    \"\"\"\n<fim_suffix>\n    return filtered_df\n\n<fim_middle>",
        "input": "",
        "output": "    filtered_df = df[df['score'] > 80].loc[df['age'] < 30]\n"
    },
    {
        "instruction": "<fim_prefix>\ndef add_percentage(df, col1, col2):\n    \"\"\"\n    Create a new DataFrame with an additional column 'percentage', which contains the percentage of col1 compared to col2.\n    The percentage should be rounded to two decimal places.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - col1 (str): Name of the first column to consider\n    - col2 (str): Name of the second column to consider\n\n    Returns:\n    - DataFrame: New DataFrame with an additional 'percentage' column.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n        col1  col2\n    0     10    50\n\n    Function call:\n    --------------\n    add_percentage(df, 'col1', 'col2')\n\n    Output DataFrame:\n    -----------------\n        col1  col2  percentage\n    0     10    50     20.00\n    \"\"\"\n<fim_suffix>\n    return new_df\n\n<fim_middle>",
        "input": "",
        "output": "    new_df = df.copy()\n    new_df['percentage'] = round((new_df['col1'] / new_df['col2']) * 100, 2)\n"
    },
    {
        "instruction": "<fim_prefix>\ndef add_constant_column(df, col_name, constant_value):\n    \"\"\"\n    Create a new DataFrame with an additional column 'col_name', which contains a constant value for each row\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - col_name (str): Name of the new column to add\n    - constant_value: The constant value to populate the new column with\n\n    Returns:\n    - DataFrame: New DataFrame with an additional 'col_name' column.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n        col1  col2  col3\n    0     1    2    3\n\n    Function call:\n    --------------\n    add_constant_column(df, 'new_col', 7)\n\n    Output DataFrame:\n    -----------------\n        col1  col2  col3  new_col\n    0      1    2    3        7\n    \"\"\"\n<fim_suffix>\n    return new_df\n\n<fim_middle>",
        "input": "",
        "output": "    new_df = df.copy()\n    new_df[col_name] = constant_value\n"
    },
    {
        "instruction": "<fim_prefix>\ndef filter_rows(df, column, operator, value):\n    \"\"\"\n    Filter the DataFrame to only include rows that satisfy a given condition on a specific column.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - column (str): Name of the column to consider\n    - operator (str): String representing the operator to be used for comparison. It can be one of the following:\n                      - '==' for equality\n                      - '<' for less than\n                      - '>' for greater than\n                      - '<=' for less than or equal to\n                      - '>=' for greater than or equal to\n    - value (any): The value to be compared against in the condition\n\n    Returns:\n    - DataFrame: New DataFrame containing only the rows that satisfy the given condition.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n        Name  Age\n    0   John   25\n    1   Lisa   30\n    2   Mark   35\n\n    Function call:\n    --------------\n    filter_rows(df, 'Age', '>', 28)\n\n    Output DataFrame:\n    -----------------\n        Name  Age\n    1   Lisa   30\n    2   Mark   35\n    \"\"\"\n<fim_suffix>\n    return filtered_df\n\n<fim_middle>",
        "input": "",
        "output": "\n    query_str = f\"{column} {operator} @value\"\n    filtered_df = df.query(query_str)\n"
    },
    {
        "instruction": "<fim_prefix>\ndef calculate_discount(df, col1, col2):\n    \"\"\"\n    Create a new DataFrame with an additional column 'discount', which contains the discount amount based on the\n    values in col1 and col2. The discount amount is calculated as follows:\n    \n    - If the value in col1 is greater than 100 and the value in col2 is less than 50, the discount amount is 0.1.\n    - If the value in col1 is less than or equal to 100, the discount amount is 0.05.\n    - For all other cases, the discount amount is 0.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - col1 (str): Name of the first column to consider\n    - col2 (str): Name of the second column to consider\n\n    Returns:\n    - DataFrame: New DataFrame with an additional 'discount' column.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n        col1  col2  col3\n    0     120   30    3\n    1      80   55    4\n    2      90   45    5\n\n    Function call:\n    --------------\n    calculate_discount(df, 'col1', 'col2')\n\n    Output DataFrame:\n    -----------------\n        col1  col2  col3  discount\n    0     120   30    3      0.10\n    1      80   55    4      0.00\n    2      90   45    5      0.05\n    \"\"\"\n<fim_suffix>\n    return new_df\n\n<fim_middle>",
        "input": "",
        "output": "    new_df = df.copy()\n    new_df['discount'] = new_df.apply(lambda row: 0.1 if (row[col1] > 100 and row[col2] < 50)\n                                       else (0.05 if row[col1] <= 100 else 0), axis=1)\n"
    },
    {
        "instruction": "<fim_prefix>\ndef calculate_discount(df, col1, col2):\n    \"\"\"\n    Create a new column 'discount' in the given DataFrame based on the conditions:\n    - If col1 is greater than 10 and col2 is greater than 5, the discount should be 20%.\n    - If col1 is less than or equal to 10 or col2 is less than or equal to 5, the discount should be 10%.\n    - If neither condition is met, the discount should be 5%.\n\n    Parameters:\n    - df (DataFrame): Original DataFrame\n    - col1 (str): Name of the first column to consider\n    - col2 (str): Name of the second column to consider\n\n    Returns:\n    - DataFrame: New DataFrame with an additional 'discount' column.\n\n    Example:\n    ---------\n    Input DataFrame:\n    ----------------\n       col1  col2\n    0     12     6\n    1      5     8\n    2     15     3\n\n    Function call:\n    --------------\n    calculate_discount(df, 'col1', 'col2')\n\n    Output DataFrame:\n    -----------------\n       col1  col2  discount\n    0     12     6       20%\n    1      5     8       10%\n    2     15     3        5%\n    \"\"\"\n<fim_suffix>\n    return new_df\n\n<fim_middle>",
        "input": "",
        "output": "    new_df = df.copy()\n    new_df['discount'] = df.apply(lambda row: '20%' if row[col1] > 10 and row[col2] > 5 else ('10%' if row[col1] <= 10 or row[col2] <= 5 else '5%'), axis=1)\n"
    }
]